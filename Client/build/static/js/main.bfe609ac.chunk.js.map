{"version":3,"sources":["Message.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","message","messages","socket","io","connect","sendMessage","ev","preventDefault","alert","emit","on","data","console","log","setState","concat","toConsumableArray","addMessage","scrollToBottom","el","scrollIntoView","behavior","_this2","react_default","a","createElement","className","id","map","ref","type","value","onChange","target","onClick","Component","Chat","login","e","clicked","box","document","getElementById","contentwrap","style","display","src_Message","React","App","src_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfe609ac.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport io from \"socket.io-client\";\r\n\r\nclass Message extends Component\r\n{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            message: '',\r\n            messages: []\r\n        }\r\n\r\n         this.socket = io.connect('localhost:5000');\r\n\r\n         const addMessage = (data) =>\r\n         {\tconsole.log(data);\r\n         \tthis.setState({messages: [...this.state.messages, data]});\r\n         \tconsole.log(this.state.messages);\r\n         }\r\n\r\n         this.sendMessage = ev =>\r\n         {\r\n         \tev.preventDefault();\r\n\r\n         \tif(this.state.message == '')\r\n         \t{\r\n         \t\talert(\"Please enter a message before sending\");\r\n         \t}\r\n         \telse\r\n         \t{\r\n         \tthis.socket.emit ('data' , {\r\n         \t\tusername: this.props.username,\r\n         \t\tmessage: this.state.message\r\n         \t});\r\n         }\r\n         this.state.message = '';\r\n\r\n         }\r\n\r\n         this.socket.on('data', function(data)\r\n         {\r\n         \taddMessage(data);\r\n         });\r\n\r\n}\r\n\r\n\r\n//scroll to bottom on recieving new messages\r\ncomponentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  scrollToBottom() {\r\n    this.el.scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n//end\r\n\r\n\r\n\r\n\r\n\trender()\r\n\t{\r\n\t\treturn(\r\n\t\t\t\r\n\t\t\t<span className=\"block\"> \r\n\t\t\t\t<div id=\"header\" > <span id=\"welcome\"> Welcome {this.props.username}, You are online now </span> </div>\r\n\t\t\t\t<div id=\"output\">\r\n\t\t\t\t\t\t{this.state.messages.map(message => {\r\n\r\n\t\t\t\t\t\t\treturn (<div id=\"bubble\"> <strong> <span id=\"userName\"> {message.username}</span> <hr /> </strong>  {message.message} </div>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\r\n\t\t\t\t\t<div ref={el => { this.el = el; }} />\r\n\t\t\t\t  </div>\r\n\t\t\t \r\n\r\n\t\t\t <span className=\"InputMessage\">\r\n\t\t\t\t\r\n\t\t\t\t<span><input type=\"text\" value = {this.state.message } onChange = {ev=> this.setState({message: ev.target.value})} /></span>\r\n\t\t\t\t<span><button type=\"button\" id=\"send\" onClick = {this.sendMessage} > Send </button></span>\r\n\t\t\t\t\r\n\t\t\t</span>\r\n\t\t\t</span>\r\n\t\t\t \r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport Message from './Message.js';\r\nclass Chat extends React.Component\r\n{\r\n\tstate = {\r\n\t\t username: null\r\n\t}\r\n\r\n\tlogin = (e) =>\r\n\t{\r\n\t\t\r\n\t\t\t\tthis.setState({\r\n    \t\t\tusername: e.target.value});\r\n  \t\t\t\r\n\t\t}\r\n\t\r\n\r\n\tclicked = (e) =>\r\n\t\t{\r\n\t\t\tif(this.state.username == null)\r\n\t\t\t{\r\n\t\t\t\talert(\"Please enter username\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\tvar box = document.getElementById('box');\r\n\t\t\tvar contentwrap = document.getElementById('contentwrap');\r\n\r\n\r\n\r\n\t\t\tbox.style.display = 'none';\r\n\t\t\tcontentwrap.style.display = 'block';\r\n\t\t}\r\n\t\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t//functions governing the app\r\n\r\n\t\t\r\n\r\n\r\n\t\t//return\r\n\t\treturn(\r\n\r\n\t\t\t <div className=\"initialise\">\r\n      \t\t\t<div id=\"box\" >\r\n      \t\t\t<br /> <br />\r\n       \t\t\t\t<span id=\"welcome-text\"> WELCOME </span> <br /> <br />\r\n       \t\t\t \t<span id=\"username\"> Enter Username </span>\r\n       \t\t\t\t<br /> <br />\r\n       \t\t\t\t \r\n      \t\t\t\t\t<input type=\"text\" onChange={this.login} id=\"text-line\" />\r\n      \t\t\t\t\t<br /> <br />\r\n      \t\t\t\t\t<button type=\"button\" onClick= {this.clicked} > Join </button> <br /> <br /> <br /> <br />\r\n    \t\t\t\t\r\n        \t\t</div> \r\n\r\n     \t\t\t<div id=\"contentwrap\" >    \r\n\t\t\t\t<span >\t<Message  username= {this.state.username} /> </span>\r\n\t\t\t\t</div>\r\n        \t</div>\r\n\r\n\r\n     \t\t\r\n        \t\r\n\r\n\r\n\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default Chat;","import React, { Component } from 'react';\r\n\r\n\r\nimport './App.css';\r\nimport Chat from './Chat.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div> <Chat /> </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}